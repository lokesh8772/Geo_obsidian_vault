/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var F=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var k=Object.prototype.hasOwnProperty;var V=(w,h)=>{for(var e in h)F(w,e,{get:h[e],enumerable:!0})},R=(w,h,e,t)=>{if(h&&typeof h=="object"||typeof h=="function")for(let n of O(h))!k.call(w,n)&&n!==e&&F(w,n,{get:()=>h[n],enumerable:!(t=I(h,n))||t.enumerable});return w};var $=w=>R(F({},"__esModule",{value:!0}),w);var B={};V(B,{default:()=>E});module.exports=$(B);var d=require("obsidian");var b=class{constructor(h,e){this.app=h,this.settings=e,this.logFilePath=e.logFilePath}async log(h,e,t={},n,s,a){if(this.logFilePath==="")return;let i=this.generateLogData(h,e,t,n,s,a);await this.appendToLogFile(i)}generateLogData(h,e,t,n,s,a){let i={action:h,timestamp:new Date().toISOString()};if(this.settings.logNoteTitle&&(i.noteTitle=e.basename),this.settings.logFrontMatterProperties.length>0){i.frontmatter={};let l=this.settings.logFrontMatterProperties;if(Array.isArray(l)&&l.length===1&&l[0]==="*")i.frontmatter=t;else for(let r of this.settings.logFrontMatterProperties)t[r]&&(i.frontmatter[r]=t[r])}return n&&(i.reviewScore=n),s&&(i.newInterval=s),a&&(i.newEaseFactor=a),JSON.stringify(i)+`
`}async appendToLogFile(h){try{let e=this.app.vault.getAbstractFileByPath(this.logFilePath);if(e||(console.log(`Log file ${this.logFilePath} does not exist. Creating a new file.`),await this.app.vault.create(this.logFilePath,""),e=this.app.vault.getAbstractFileByPath(this.logFilePath)),e){let t=this.app.vault.getFileByPath(e.path);t?await this.app.vault.append(t,h):console.error(`Error: Unable to access log file ${this.logFilePath}`)}else console.error(`Error: Unable to create or access log file ${this.logFilePath}`)}catch(e){console.error(`Error writing to log file: ${e}`)}}};var c=require("obsidian"),x=class extends c.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new c.Setting(e).setName("Spacing methods").setHeading();let t=e.createDiv(),n=e.createDiv(),s=e.createDiv(),a=document.createDocumentFragment();a.append("Define and manage the spacing methods you want to use for your spaced everything practice. ","You can create multiple spacing methods and map them to different contexts. ","Check the ",a.createEl("a",{href:"https://github.com/zachmueller/spaced-everything/blob/main/README.md",text:"documentation"})," for more information."),new c.Setting(t).setDesc(a),this.plugin.settings.spacingMethods.forEach((o,g)=>{this.renderSpacingMethodSetting(n,o,g)}),new c.Setting(s).addButton(o=>o.setButtonText("Add spacing method").setTooltip("Add a new spacing method").onClick(async()=>{let g={name:`Spacing method #${this.plugin.settings.spacingMethods.length+1}`,spacingAlgorithm:"SuperMemo2.0",customScriptFileName:"",reviewOptions:[],defaultInterval:1,defaultEaseFactor:2.5};this.plugin.settings.spacingMethods.push(g),await this.plugin.saveSettings(),this.renderSpacingMethodSetting(n,g,this.plugin.settings.spacingMethods.length-1)})),new c.Setting(e).setName("Contexts").setHeading();let i=e.createDiv(),l=e.createDiv(),r=e.createDiv();new c.Setting(i).setDesc("Define and manage the contexts you want to use for categorizing notes in your spaced everything practice. You can toggle the active state of each context to control which notes will be included in the review queue. Note: leaving this empty will ignore the use of contexts in the review system (i.e., all notes onboarded to Spaced Everything are in scope for reviews)."),this.plugin.settings.contexts.forEach((o,g)=>{this.renderContextSetting(r,o,g)}),new c.Setting(l).addButton(o=>o.setButtonText("+").setIcon("plus").setTooltip("Add new context").onClick(async()=>{let g={name:"",isActive:!1};this.plugin.settings.contexts.push(g),await this.plugin.saveSettings(),this.renderContextSetting(r,g,this.plugin.settings.contexts.length-1)})),new c.Setting(e).setName("Logging").setHeading(),new c.Setting(e).setName("Log spaced everything practice activity").setDesc("Choose the file path where Spaced Everything logs are stored. Leave blank to not capture logs. Note: output data format is JSONL (i.e., `.jsonl` filename extension recommended).").addText(o=>o.setValue(this.plugin.settings.logFilePath).onChange(async g=>{let p=(0,c.normalizePath)(g);this.plugin.settings.logFilePath=p,await this.plugin.saveSettings()})),new c.Setting(e).setName("Log action: note onboarded to Spaced Everything").setDesc("Whether to log the action of onboarding a new note to Spaced Everything").addToggle(o=>o.setValue(this.plugin.settings.logOnboardAction).onChange(async g=>{this.plugin.settings.logOnboardAction=g,await this.plugin.saveSettings()})),new c.Setting(e).setName("Log action: note removed from Spaced Everything").setDesc("Whether to log the action of removing a note from Spaced Everything").addToggle(o=>o.setValue(this.plugin.settings.logRemoveAction).onChange(async g=>{this.plugin.settings.logRemoveAction=g,await this.plugin.saveSettings()})),new c.Setting(e).setName("Log note title").setDesc("Whether to include the note title in the log").addToggle(o=>o.setValue(this.plugin.settings.logNoteTitle).onChange(async g=>{this.plugin.settings.logNoteTitle=g,await this.plugin.saveSettings()})),new c.Setting(e).setName("Log frontmatter properties").setDesc("Provide a list (one per line) of frontmatter properties you would like to include in the Spaced Everything logs. Input just an asterisk (*) to include all frontmatter properties.").addTextArea(o=>{var y;let p=((y=this.plugin.settings.logFrontMatterProperties)!=null?y:[]).join(`
`);o.setPlaceholder("Enter frontmatter properties, one per line").setValue(p).onChange(async v=>{if(v.trim()==="*")this.plugin.settings.logFrontMatterProperties=["*"];else{let T=v.trim().split(`
`).filter(u=>u.trim()!=="");this.plugin.settings.logFrontMatterProperties=T}await this.plugin.saveSettings()})}),new c.Setting(e).setName("Capture thought").setHeading(),new c.Setting(e).setName("Note title template").setDesc("Template for generating the title of the new note").addText(o=>o.setPlaceholder("Enter your template here").setValue(this.plugin.settings.capturedThoughtTitleTemplate).onChange(async g=>{this.plugin.settings.capturedThoughtTitleTemplate=g,await this.plugin.saveSettings()})),new c.Setting(e).setName("Note directory").setDesc("Directory where the new note should be created (leave empty for default directory)").addText(o=>o.setPlaceholder("Enter your directory path here").setValue(this.plugin.settings.capturedThoughtDirectory).onChange(async g=>{let p=g.replace(/\/+$/,"");this.plugin.settings.capturedThoughtDirectory=p,await this.plugin.saveSettings()})),new c.Setting(e).setName("New note template").setDesc("Template for the initial content of the new note").addTextArea(o=>o.setPlaceholder("Enter your template here").setValue(this.plugin.settings.capturedThoughtNoteTemplate).onChange(async g=>{this.plugin.settings.capturedThoughtNoteTemplate=g,await this.plugin.saveSettings()})),new c.Setting(e).setName("Include short thought in alias").setDesc("Include the thought as an alias in the frontmatter if it's shorter than the threshold").addToggle(o=>o.setValue(this.plugin.settings.includeShortThoughtInAlias).onChange(async g=>{this.plugin.settings.includeShortThoughtInAlias=g,await this.plugin.saveSettings()})),new c.Setting(e).setName("Short thought threshold").setDesc("Maximum length of the thought (in characters) for it to be included as an alias").addText(o=>o.setPlaceholder("Enter your threshold here").setValue(this.plugin.settings.shortCapturedThoughtThreshold.toString()).onChange(async g=>{let p=parseInt(g,10);!isNaN(p)&&p>=0&&(this.plugin.settings.shortCapturedThoughtThreshold=p,await this.plugin.saveSettings())})),new c.Setting(e).setName("Open in new tab").setDesc("Open the newly created note in a new tab. If turned off, captured thought note opens in currently active tab.").addToggle(o=>o.setValue(this.plugin.settings.openCapturedThoughtInNewTab).onChange(async g=>{this.plugin.settings.openCapturedThoughtInNewTab=g,await this.plugin.saveSettings()})),new c.Setting(e).setName("Onboard all notes (beta)").setHeading().setDesc(`This provides an optional means of onboarding every note in your vault to the Spaced Everything system. Importantly, the plugin uses frontmatter properties on notes to track relevant metadata to perform the spacing algorithm actions. So it is recommended to use the "Excluded folders" setting below to filter out subsets of notes that you wish to avoid onboarding. Performing this action will not change any existing Spaced Everything frontmatter if you already have some notes oboarded.

This is still a beta feature. Currently, it asusmes to only apply the settings from the first Spacing Method (defined above) and assumes to not set any context for notes onboarded in this manner.`),new c.Setting(e).setName("Excluded folders").setDesc("Enter the paths of any folders you want to exclude from the onboarding process (one per line). Consider adding folders that contain things like templates or scripts that may not work if frontmatter properties are added to them.").addTextArea(o=>{o.setValue(this.plugin.settings.onboardingExcludedFolders.join(`
`)).onChange(async g=>{this.plugin.settings.onboardingExcludedFolders=g.trim().split(`
`).filter(p=>p),await this.plugin.saveSettings()})}),new c.Setting(e).setName("Onboard all notes").setDesc("Click the button to add the required frontmatter properties to all notes in your vault, excluding the folders specified above.").addButton(o=>o.setButtonText("Onboard all notes").onClick(async()=>this.showConfirmationModal()))}async showConfirmationModal(){new N(this.app,this.plugin).open()}async addFrontMatterPropertiesToAllNotes(){let e=this.app.vault.getMarkdownFiles();for(let t of e)this.isFileExcluded(t)||await this.addFrontMatterPropertiesToNote(t)}isFileExcluded(e){let t=this.plugin.settings.onboardingExcludedFolders,n=e.parent;for(;n;){if(t.includes(n.path))return!0;n=n.parent}return!1}async addFrontMatterPropertiesToNote(e){var s;let t=(s=this.app.metadataCache.getCache(e.path))==null?void 0:s.frontmatter,n={"se-interval":(t==null?void 0:t["se-interval"])||this.plugin.settings.spacingMethods[0].defaultInterval,"se-last-reviewed":(t==null?void 0:t["se-last-reviewed"])||new Date().toISOString().split(".")[0],"se-ease":(t==null?void 0:t["se-ease"])||this.plugin.settings.spacingMethods[0].defaultEaseFactor};await this.app.fileManager.processFrontMatter(e,async a=>{a["se-interval"]=n["se-interval"],a["se-last-reviewed"]=n["se-last-reviewed"],a["se-ease"]=n["se-ease"]})}renderSpacingMethodSetting(e,t,n){let s=e.createDiv("spacing-method-settings-items"),a=s.createDiv("spacing-method-header"),i=s.createDiv("spacing-method-body"),l=`Spacing method #${n+1}`;new c.Setting(a).setName(l).setDesc("Configure the settings for this spacing method.");let r=i.createDiv("general-settings");new c.Setting(r).setName("Name").setDesc("Enter a name for this spacing method").addText(u=>u.setPlaceholder("Name").setValue(t.name||l).onChange(async f=>{f.trim()?t.name=f:t.name=l,await this.plugin.saveSettings()})),new c.Setting(r).setName("Default interval").setDesc("The default interval length, in days").addText(u=>u.setPlaceholder("Default interval").setValue(t.defaultInterval.toString()).onChange(async m=>{let f=parseFloat(m);isNaN(f)?new c.Notice("Default interval must be a number."):(t.defaultInterval=f,await this.plugin.saveSettings())})),new c.Setting(r).setName("Spacing algorithm").setDesc("Select which spacing algorithm approach to apply").addDropdown(u=>u.addOptions({"SuperMemo2.0":"SuperMemo 2.0",Custom:"Custom script"}).setValue(t.spacingAlgorithm).onChange(async m=>{t.spacingAlgorithm=m,await this.plugin.saveSettings(),o.style.display=m==="Custom"?"block":"none",p.style.display=m==="SuperMemo2.0"?"block":"none"}));let o=r.createDiv(),g=new c.Setting(o).setName("Custom script").setDesc(">>>NOT YET IMPLEMENTED<<< \u2014\u2014 Input the location of your custom script file that implements a spacing algorithm").addText(u=>u.setPlaceholder("Custom script file name").setValue(t.customScriptFileName).onChange(async m=>{t.customScriptFileName=m,await this.plugin.saveSettings()}).setDisabled(!0)),p=r.createDiv(),y=new c.Setting(p).setName("Default ease factor").setDesc("The default ease factor").addText(u=>{var m;return u.setPlaceholder("Default ease factor").setValue(((m=t.defaultEaseFactor)==null?void 0:m.toString())||"").onChange(async f=>{let P=parseFloat(f);isNaN(P)?new c.Notice("Default ease factor must be a number."):(t.defaultEaseFactor=P,await this.plugin.saveSettings())})});o.style.display=t.spacingAlgorithm==="Custom"?"block":"none",p.style.display=t.spacingAlgorithm==="SuperMemo2.0"?"block":"none";let v=i.createDiv("review-options");new c.Setting(v).setHeading().setName("Review options").setDesc("Customize the review options and scores to use in this spacing method. For the SuperMemo-2.0 spacing algorithm, review scores must be a number from 0 to 5.");let T=v.createDiv();new c.Setting(T).addButton(u=>u.setButtonText("+").setIcon("plus").setTooltip("Add a new review option").onClick(async()=>{let m={name:"",score:0};t.reviewOptions.push(m),await this.plugin.saveSettings(),this.renderReviewOptionSetting(v,m,t.reviewOptions.length-1,n)})),t.reviewOptions.forEach((u,m)=>{this.renderReviewOptionSetting(v,u,m,n)}),new c.Setting(s).addExtraButton(u=>{u.setIcon("cross").setTooltip("Delete spacing method").onClick(async()=>{this.plugin.settings.spacingMethods.length===1?new c.Notice("Cannot delete the last spacing method"):(this.plugin.settings.spacingMethods.splice(n,1),await this.plugin.saveSettings(),this.display())})})}renderContextSetting(e,t,n){let s=e.createDiv("context-settings-items");new c.Setting(s).setName(`(${n+1})`).addText(a=>a.setValue(t.name).onChange(async i=>{t.name=i,await this.plugin.saveSettings()})).addToggle(a=>a.setValue(t.isActive).onChange(async i=>{t.isActive=i,await this.plugin.saveSettings()})).addExtraButton(a=>{a.setIcon("cross").setTooltip("Delete").onClick(async()=>{this.plugin.settings.contexts.splice(n,1),await this.plugin.saveSettings(),this.display()})})}renderReviewOptionSetting(e,t,n,s){let a=e.createDiv("review-option-settings-items");new c.Setting(a).setName(`(${n+1})`).addText(i=>i.setPlaceholder("Name").setValue(t.name).onChange(async l=>{t.name=l,await this.plugin.saveSettings()})).addText(i=>i.setPlaceholder("Review score").setValue(t.score.toString()).onChange(async l=>{let r=parseFloat(l);l===""||!isNaN(r)&&r>=0&&r<=5?(t.score=r,await this.plugin.saveSettings()):new c.Notice("Review score must be a number from 0 to 5")})).addExtraButton(i=>{i.setIcon("cross").setTooltip("Delete").onClick(async()=>{this.plugin.settings.spacingMethods[s].reviewOptions.splice(n,1),await this.plugin.saveSettings(),this.display()})})}},N=class extends c.Modal{constructor(e,t){super(e);this.plugin=t,this.settingsTab=new x(e,t)}onOpen(){let{contentEl:e}=this;e.createEl("h2",{text:"Confirm Action"}),e.createEl("p",{text:"Are you sure you want to onboard to all notes in your vault? This action cannot be undone. It is highly recommended you create a full backup of your vault prior to running this vault-wide action, in case any unexpected changes result."});let t=new c.Setting(e).addButton(s=>{s.setButtonText("Confirm").setCta().onClick(async()=>{await this.settingsTab.addFrontMatterPropertiesToAllNotes(),this.close(),new c.Notice("All notes onboarded")})}),n=new c.Setting(e).addButton(s=>{s.setButtonText("Cancel").onClick(()=>{this.close()})})}onClose(){this.contentEl.empty()}};var M=require("obsidian"),D=class extends M.SuggestModal{constructor(e,t,n){super(e);this.promptText=t,this.items=n,this.onChooseItem=()=>{}}getSuggestions(e){return this.items.filter(t=>t.toLowerCase().includes(e.toLowerCase()))}renderSuggestion(e,t){t.createEl("div",{text:e})}onChooseSuggestion(e,t){this.onChooseItem(e)}};async function S(w,h){return new Promise(e=>{let t=new D(this.app,h,w);t.onChooseItem=e,t.open()})}var A=require("obsidian"),C=class{constructor(h){this.queue=new Map;this.app=h}add(h,e){let t=h.path;this.queue.has(t)||this.queue.set(t,{});let n=this.queue.get(t);Object.assign(n,e)}async process(){for(let[h,e]of this.queue){let t=this.app.vault.getAbstractFileByPath(h);t instanceof A.TFile&&await this.updateFrontmatter(t,e)}this.queue.clear()}async updateFrontmatter(h,e){return new Promise(t=>{this.app.fileManager.processFrontMatter(h,n=>{Object.entries(e).forEach(([s,a])=>{a===void 0?delete n[s]:n[s]=a}),t()})})}};var L={logFilePath:"",logOnboardAction:!0,logRemoveAction:!0,logNoteTitle:!0,logFrontMatterProperties:[],contexts:[],spacingMethods:[{name:"SuperMemo 2.0 (Simplified)",spacingAlgorithm:"SuperMemo2.0",customScriptFileName:"",reviewOptions:[{name:"Fruitful",score:1},{name:"Ignore",score:3},{name:"Unfruitful",score:5}],defaultInterval:1,defaultEaseFactor:2.5}],capturedThoughtTitleTemplate:"Inbox {{unixtime}}",capturedThoughtDirectory:"",capturedThoughtNoteTemplate:`## Captured thought
{{thought}}`,includeShortThoughtInAlias:!0,shortCapturedThoughtThreshold:200,openCapturedThoughtInNewTab:!1,onboardingExcludedFolders:[]},E=class extends d.Plugin{async onload(){await this.loadSettings(),this.logger=new b(this.app,this.settings),this.frontmatterQueue=new C(this.app),this.addSettingTab(new x(this.app,this)),this.addCommand({id:"log-review-outcome",name:"Log review outcome",editorCallback:(e,t)=>{this.logReviewOutcome(e,t)}}),this.addCommand({id:"open-next-review-item",name:"Open next review item",editorCallback:(e,t)=>{this.openNextReviewItem(e,t)}}),this.addCommand({id:"toggle-note-contexts",name:"Toggle note contexts",editorCallback:(e,t)=>{this.toggleNoteContextsWrapper(e,t)}}),this.addCommand({id:"capture-thought",name:"Capture thought",callback:()=>{this.captureThought()}}),this.addCommand({id:"update-spacing-method",name:"Update spacing method",editorCallback:(e,t)=>{this.updateSpacingMethod(e,t)}})}queueFrontmatterUpdate(e,t){this.frontmatterQueue.add(e,t)}async processFrontmatterQueue(){await this.frontmatterQueue.process()}async captureThought(){let e=new d.Modal(this.app);e.contentEl.createEl("h3",{text:"Capture thought"});let t=e.contentEl.createEl("span"),n=[t.createEl("code",{text:"{{unixtime}}"}),t.createEl("span",{text:", "}),t.createEl("code",{text:"{{date}}"}),t.createEl("span",{text:", and "}),t.createEl("code",{text:"{{time}}"})];t.createEl("span",{text:"Write out your thought here. You have access to the following variables: "}),n.forEach(i=>t.appendChild(i)),e.contentEl.createEl("br",{}),e.contentEl.createEl("br",{});let s=e.contentEl.createEl("textarea");s.style.height="100%",s.style.width="100%",e.contentEl.createEl("small",{text:"Shift + Enter for new lines."}),e.contentEl.createEl("br",{}),e.contentEl.createEl("small",{text:"Enter to submit."});let a=async i=>{if(i===null||i===""){new d.Notice("Cancelled by the user");return}e.close();let l=new Date;i=this.processCapturedThoughtNewNoteContents(i,l);let r=await this.createNewNoteFile(i,l);await this.openNewNote(r);let o=[];await this.onboardNoteToSpacedEverything(r,{}),await this.frontmatterQueue.add(r,{"se-capture-time":Math.floor(l.getTime()/1e3).toString(),aliases:this.settings.includeShortThoughtInAlias&&i&&i.length<=this.settings.shortCapturedThoughtThreshold?[i]:void 0}),await this.processFrontmatterQueue()};s.addEventListener("keydown",i=>{i.key==="Enter"&&!i.shiftKey&&(i.preventDefault(),a(s.value||null))}),e.open()}processCapturedThoughtNewNoteContents(e,t){return e=e.trim(),e=this.replaceCapturedThoughtVariables(e,t),e}replaceCapturedThoughtVariables(e,t){let n=Math.floor(t.getTime()/1e3).toString(),s=t.toISOString().split("T")[0],a=t.toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"});return e=e.replace(/{{unixtime}}/g,n.toString()).replace(/{{date}}/g,s).replace(/{{time}}/g,a),e}async generateUniqueFilePath(e,t=".md"){let n=`${e}${t}`;if(!await this.app.vault.adapter.exists(n))return n;let s=1;for(;;){let a=`${e}-${s}${t}`;if(!await this.app.vault.adapter.exists(a))return a;n=`${e} ${s}`,s++}}async createNewNoteFile(e,t){let n=this.replaceCapturedThoughtVariables(this.settings.capturedThoughtTitleTemplate,t),s=this.settings.capturedThoughtDirectory||"",a=await this.generateUniqueFilePath(`${s}/${n}`),i=this.settings.capturedThoughtNoteTemplate,l=i.includes("{{thought}}"),r;return l?r=i.replace(/{{thought}}/g,e):(r=`${i}

---

## Thought
${e}

`,r+="Note: Your `Capture thought -> New note template` setting does not contain the `{{thought}}` variable, thus your captured thought was appended below your existing template. Please visit your Spaced Everything plugin settings to update the template and prevent this message from arising in the future."),await this.app.vault.create(a,r)}async openNewNote(e){let{openCapturedThoughtInNewTab:t}=this.settings;if(!t){let n=this.app.workspace.activeLeaf;if(n){await n.openFile(e);return}else new d.Notice("No active editor, opened note in new tab")}await this.app.workspace.openLinkText(e.path,e.path,!0,{active:!0})}async toggleNoteContextsWrapper(e,t){let n=this.app.workspace.getActiveFile();if(!n){new d.Notice("No active file to toggle contexts.");return}await this.toggleNoteContexts(n),await this.processFrontmatterQueue()}async toggleNoteContexts(e){var i;if(this.settings.contexts.length===0){new d.Notice("Spaced Everything: No contexts defined");return}let t=(i=this.app.metadataCache.getFileCache(e))==null?void 0:i.frontmatter,n=t&&t["se-contexts"]?t["se-contexts"]:[],s=this.settings.contexts.map(l=>`${n.includes(l.name)?"\u2611":"\u2610"} ${l.name}`),a=await S(s,"Select contexts for this note:");if(a){let l=a.replace(/(?:☑|☐)\s/,""),r=n.filter(o=>o!==l);n.includes(l)||r.push(l),await this.frontmatterQueue.add(e,{"se-contexts":r})}}async logReviewOutcome(e,t){var l;let n=this.app.workspace.getActiveFile();if(!n){new d.Notice("No active file to review.");return}let s=new Date().toISOString().split(".")[0],a=(l=this.app.metadataCache.getFileCache(n))==null?void 0:l.frontmatter;if(await this.isNoteOnboarded(n,a)){let r=await this.getActiveSpacingMethod(n,a);if(!r){new d.Notice("Error: No active spacing method found for this note.");return}let o=[...r.reviewOptions.map(p=>p.name),"Remove"],g=await S(o,"Select review outcome:");if(!g){new d.Notice("Spaced Everything review cancelled by user");return}if(g==="Remove")await this.removeNoteFromSpacedEverything(n,a);else{let p=r.reviewOptions.find(T=>T.name===g);if(!p){new d.Notice("Error: Review option not found in settings. Please check your settings.");return}if(p.score===void 0||p.score===null){new d.Notice(`Error: Review option score is not set in settings. Please set a score for the selected review option: ${p.name}`);return}let{newInterval:y,newEaseFactor:v}=await this.updateInterval(n,a,p.score,s,r)}}else await this.onboardNoteToSpacedEverything(n,a);await this.processFrontmatterQueue()}filterNotesByContext(e){let t=this.settings.contexts.filter(n=>n.isActive).map(n=>n.name);return this.settings.contexts.length===0?e:this.settings.contexts.length>0&&t.length===0?(new d.Notice("Spaced everything: No active contexts"),[]):e.filter(n=>{var l;let s=(l=this.app.metadataCache.getFileCache(n))==null?void 0:l.frontmatter,a=(s==null?void 0:s["se-contexts"])||[];return a.length===0?!0:a.some(r=>t.includes(r))})}async openNextReviewItem(e,t){let s=this.app.vault.getMarkdownFiles(),a=this.filterNotesByContext(s).filter(i=>{var y;let l=(y=this.app.metadataCache.getFileCache(i))==null?void 0:y.frontmatter;if(!l||l["se-interval"]===void 0)return!1;let r=Date.now(),o=l["se-interval"]*24*60*60*1e3,g=l["se-last-reviewed"]?new Date(l["se-last-reviewed"]).getTime():0;return r>g+o}).sort((i,l)=>{var m,f;let r=(m=this.app.metadataCache.getFileCache(i))==null?void 0:m.frontmatter,o=(f=this.app.metadataCache.getFileCache(l))==null?void 0:f.frontmatter,g=r!=null&&r["se-last-reviewed"]?new Date(r["se-last-reviewed"]).getTime():0,p=o!=null&&o["se-last-reviewed"]?new Date(o["se-last-reviewed"]).getTime():0,y=(r==null?void 0:r["se-interval"])*24*60*60*1e3,v=(o==null?void 0:o["se-interval"])*24*60*60*1e3,T=g+(y||0),u=p+(v||0);return T-u});if(a.length===0)new d.Notice("No notes to review, enjoy some fresh air!");else{let i=a[0];this.app.workspace.getLeaf(!1).openFile(i)}}async selectContext(e){return S(e,"Select a context for this note:")}async isNoteOnboarded(e,t){return Object.keys(t||{}).includes("se-interval")}async onboardNoteToSpacedEverything(e,t){let n=new Date().toISOString().split(".")[0];await this.toggleNoteContexts(e);let s,a=this.settings.spacingMethods;if(a.length===1)s=a[0];else{let i=a.map(r=>r.name),l=await S(i,"Select a spacing method for this note:");if(l)s=a.find(r=>r.name===l);else return new d.Notice("Onboarding cancelled by user."),!1}return await this.queueFrontmatterUpdate(e,{"se-interval":s.defaultInterval,"se-last-reviewed":n,"se-ease":s.defaultEaseFactor,"se-method":s.name}),this.settings.logOnboardAction&&this.logger.log("onboarded",e,t),new d.Notice(`Onboarded note to Spaced Everything: ${e.basename}`),!0}async removeNoteFromSpacedEverything(e,t){await this.queueFrontmatterUpdate(e,{"se-interval":void 0,"se-ease":void 0,"se-last-reviewed":void 0,"se-contexts":void 0}),new d.Notice(`Removed note from Spaced Everything: ${e.basename}`),this.settings.logRemoveAction&&this.logger.log("removed",e,t)}async updateInterval(e,t,n,s,a){let i=1,l=2.5,r=0,o=0;return await this.app.fileManager.processFrontMatter(e,g=>{i=Number(g["se-interval"]||(a==null?void 0:a.defaultInterval)||1),l=Number(g["se-ease"]||(a==null?void 0:a.defaultEaseFactor)||2.5),o=l+(.1-(5-n)*(.08+(5-n)*.02)),o=Math.max(1.3,parseFloat(o.toFixed(4))),r=Math.max(1,i*o),r=parseFloat(r.toFixed(4)),n<3&&(r=1),this.settings.logFilePath&&this.logger.log("review",e,g,n,r,o)}),await this.queueFrontmatterUpdate(e,{"se-interval":r,"se-ease":o,"se-last-reviewed":s}),new d.Notice(`Interval updated from ${i} to ${r}`),{newInterval:r,newEaseFactor:o}}async getActiveSpacingMethod(e,t){var a;let n=t==null?void 0:t["se-method"],s=this.settings.spacingMethods.find(i=>i.name===n);if(!s){let i=(t==null?void 0:t["se-contexts"])||[];if(i.length===0)return s=this.settings.spacingMethods[0],new d.Notice(`Set 'se-method' to '${s.name}' for this note (no context defined).`),await this.queueFrontmatterUpdate(e,{"se-method":s.name}),s;let l=i[0],r=(a=this.settings.contexts.find(o=>o.name===l))==null?void 0:a.spacingMethodName;return r&&(s=this.settings.spacingMethods.find(o=>o.name===r),s)?(new d.Notice(`Set 'se-method' to '${s.name}' for this note (based on '${l}' context).`),await this.queueFrontmatterUpdate(e,{"se-method":s.name}),s):(s=this.settings.spacingMethods[0],new d.Notice(`Set 'se-method' to '${s.name}' for this note (no context mapped to a spacing method).`),await this.queueFrontmatterUpdate(e,{"se-method":s.name}),s)}return s}async updateSpacingMethod(e,t){let n=this.app.workspace.getActiveFile();if(!n){new d.Notice("No active file to update spacing method.");return}let s=this.settings.spacingMethods.map(i=>i.name),a=await S(s,"Select a spacing method:");a?(await this.queueFrontmatterUpdate(n,{"se-method":a}),new d.Notice(`Updated spacing method to '${a}' for ${n.basename}`)):new d.Notice("Spacing method update cancelled by user.")}onunload(){}async loadSettings(){this.settings=Object.assign({},L,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};

/* nosourcemap */